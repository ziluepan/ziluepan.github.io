[{"content":"一级标题 二级标题 ##二级标题\n三级标题 ###三级标题\n大于符号 引用\n继续大于哈哈 王非王，侯非侯\n有序列表 把大象放进冰箱：\n打开冰箱 把大象放进去 关上冰箱 无序列表 短横线 星号也行，但是不推荐，因为它会自动两个 取消列表的方式 回车 * 2 或者回车后backback后退键(不推荐) 任务列表 -+空格+方括号+空格(字母x表示勾选上)+方括号+空格 吃饭 睡觉 打豆豆 代码块 1 2 3 4 int main() { return 0; } 脚注 一键三连1\n上标 下标 高亮 x^2^ H2O ==高亮== 加粗\n百度 \u0026lt;baidu.com\u0026gt; 标题 [百度][id] [id]: baidu.com\n点赞、投币、收藏\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-09-18T19:35:00Z","permalink":"https://www.uder.rocks/p/md-example/","title":"示例"},{"content":"使用 Cloudflare 在 Gmail 上配置域名邮箱 | 叶子的花园\n🥬叶子叶子的花园靡不有初，鲜克有终@Misaka-Clover5110126\n1. 前言 2. 选择 Cloudflare 作为自己的域名托管商 3. 设置 Cloudflare Email Routing 路由规则 4. 添加 Cloudflare 的 MX 记录 5. 配置 Gmail 以域名邮箱的名义发送邮件 5.1. 获取谷歌账户的专属应用密码 5.2. 配置 Gmail 发送邮件地址 使用 Cloudflare 在 Gmail 上配置域名邮箱 发表于 2024-07-31- 更新于 2024-09-22 1.5k- 5m 叶子的小知识-博文Cloudflare域名邮箱\n前言 在去年初，我在这篇周记里讲我配置了「域名邮箱的接收」，但是因为我犯懒，就一直没有配置其发送。最近看到一个关注许久的博客出了问题，无法留言，就趁此机会把**「域名邮箱的发送」**配置啦。本篇文章的所有配置步骤，均参考 数字游民 的这篇教程：如何使用 Cloudflare 配置域名邮箱收发邮件（备份 于此），并根据自己的经历作了一点小小的修改。\n整个步骤大体上可以分为两个部分：\n配置域名邮箱接收邮件，并转发到自己的邮箱（如 Gmail）； 配置域名邮箱发送邮件，该功能依托其他大型邮件服务商（如 Gmail）。 选择 Cloudflare 作为自己的域名托管商 在我之前的文章里，有说过为什么选择 Cloudflare 作为我的域名托管商。最初我的域名是托管在 Namecheap 上的，不过由于首年便宜，续费太贵的缘故，我就将域名转移到了 Cloudflare 上了 —— 这是偷偷摸摸做的，那时忙着做实验室的项目，所以忘记写一篇博文来纪念一下了，好遗憾的。Cloudflare 在这篇博客里说过他们为什么会开始自己做域名服务的托管，也说了他们为什么不会像其他公司一样将续费价格翻好几倍，当然也说了他们为什么承诺为每一位用户提供 免费 SSL 等服务。我真的好感动，Cloudflare 为大家创造了一个更好的互联网，难怪许多人都愿意尊称他们为**「赛博佛祖」**。\nCloudflare 所列出的顶级域名收费明细\n如果自己有域名，需要将其转移到 Cloudflare 上托管。如果没有域名，那直接在 Cloudflare 上注册一个也未尝不可。\n设置 Cloudflare Email Routing 路由规则 登陆 Cloudflare 的 dash/控制台 页面，其左栏应有 Email/电子邮件 一项，在下拉列表的 电子邮件路由 — 路由规则 处有：\n可以打开该功能，会使得所有发给你域名的邮件都会应用后续规则，也就是都会转发到你指定的目标邮箱。该功能是可选项，非必须。我参考的教程上，有这样写道：\n比较在乎隐私保护的朋友可以使用这个服务，比如在注册各种网站服务时用服务名称临时编个前缀，注册 craft 时就用 craft@example.com；注册 disney+ 时就用 disney@example.com。 这样收到垃圾邮件时，可以知道是哪家服务商把你的信息泄露了，也可以根据收件人来拒收邮件。\n而在页面下方有：\n可以点击右侧的 创建地址 会出现：\n在「自定义地址」处填入自己想要的邮箱地址，在「操作」处填入 发送到电子邮件（即转发功能），在「目标位置」填入自己的邮箱以后，我们便设置好了。接下来 Cloudflare 会给你的邮箱发送一封确认邮件，点击其中的链接即可验证身份，到此配置完毕。\n添加 Cloudflare 的 MX 记录 在配置好以上邮箱与路由规则以后，在 Email/电子邮件 处点击「添加记录」，就可以将 MX 记录一键导入到 DNS — 记录 中，参考类型如下：\n配置 Gmail 以域名邮箱的名义发送邮件 我认为在网络世界中，邮箱名字链接了太多的个人信息，这也是个人隐私的一部份。所以，我想要在某些时候，以域名邮箱的名义发送邮件，比如域名邮箱接收到他人来信的时候 —— 他人发邮件给你的域名邮箱，总不好用另外一个邮箱回复别人吧（\n下面，我继续参考上述教程，以 Gmail 为基础，配置代理域名邮箱的发送功能：\n获取谷歌账户的专属应用密码 在浏览器中打开链接：https://myaccount.google.com/apppasswords ：\n谷歌的中文排版为什么总是喜欢逼死强迫症？\n填入一个「自定义信息」后，就会弹出窗口「系統產生的應用程式密碼」，并显示一串密码。注意：一定要复制并妥善保存这个密码，因为在你点击「确认」以后，你就再也看不到这个密码了。\n我填入的自定义信息是：Gmail-Cloudflare-mail，以供参考。\n配置 Gmail 发送邮件地址 登入 Gmail，在其右上角找到齿轮 设置 — 查看所有設定 — 帳戶和匯入，在「選擇寄件地址」一栏找到「新增另一個電子郵件地址」：\n点击「新增另一個電子郵件地址」后，会出现弹窗：\n请注意：\n邮箱名字会用于之后发邮件的默认名，会对外展示，请慎重填写； 域名邮箱地址，请事先在 Cloudflare 中配置此前缀域名邮箱，确认可以接收邮件。 完成填写后，点击「下一步」：\nSMTP 需要填写 smtp.gmail.com； port 端口保持默认即可，如果需要变更协议，端口需要做相应变更； username 填写原本 Gmail 的用户名，即邮箱地址中除去 @gmail.com 之外的信息； password 需要使用在步骤 4.1 中获取的专属应用密码； 如果上述步骤没有问题，成功进入下一个页面会看到：\n因为我已经建好了域名邮箱，所以截取的是教程中的图片\n此时，Gmail 会收到一封邮件，在邮件中点击链接，或者在此输入邮件中的验证码，即可配置完成。未来在使用 Gmail 发送邮件的时候，可以在发件人处选择发送该封邮件的地址。\n以上，希望你一切顺利 ：)\n**本文作者：**叶子 本文链接：https://mskclover.com/2024/07/31/custom-email-on-gmail-by-cloudflare/ ","date":"2024-09-23T00:00:00Z","permalink":"https://www.uder.rocks/p/domain-name-email/","title":"使用 Cloudflare 在 Gmail 上配置域名邮箱"},{"content":"通过cname优选域名/IP接入cloudflare 准备： 一个已经修改ns接入的CF域名作为承接域名，一个想用cname接入cloudflare的域名，一张外币卡/信用卡/已绑卡的PayPal（不会自动扣费），一个优选域名（优选域名的获取可以参考CF优选域名，优选IP的获取方式可参考CF自选IP）\n背景 在曾经，通过 CNAME 接入 Cloudflare 并不是一件难事。\n通过 Cloudflare 的合作伙伴计划（Cloudflare Partner）或者 Plesk（一个非常受欢迎的网站管理面板，类似大名鼎鼎的 CPanel）面板的插件订阅，这一点可以很轻易做到。\n从 2021 年 11 月开始，Cloudflare 禁用了 Partner 使用的 zone_setAPI 以避免滥用（因为该 API 接入不需要验证域名所有权），通过 Partner 实现 CNAME 接入的方式近乎落幕，仅剩 Plesk 空间存量的 ServerShield by Cloudflare 插件订阅能够正常接入。几个月过去了，官方也并没有对未来合作伙伴如何进行接入新域名给出任何解释。\n截至目前，通过 CNAME 接入 Cloudflare 就只剩下了 SaaS 这一条路子。\n配置接入 打开一个域名，选择【SSL/TLS】下的【自定义主机名】，点击【启用CloudFlare for SaaS】后根据指示绑定外币卡或者PayPal，订阅CloudFlare for SaaS功能。\nCloudFlare for SaaS订阅本身是针对整个计费账户的，所以通过Partner接入的域名出现【请联系客户成功经理以启用适用于SaaS的SSL】时，只需要选择个通过官方NS激活的域名启用订阅后即可使用。这里猜测可能是Partner接入的商务权限交给了合作伙伴，方便下放优惠和服务那些，我们绕过去就行了。\n激活页面中文翻译比较滞后，从英文的可以看到免费额度已经进行更新，可以放心使用。\n设置源站 选择一个承载的域名zone点进去，依然是【SSL/TLS】下的【自定义主机名】，首先要设置附加上域名的源站。在这之前要在承载的域名zone中设置一个子域名作为源站的来源，比如origin.a.com，在Partner或者官方DNS设置好它的源站（注意是是在CF里添加，和正常添加网站的流程一样）。\nSaaS这里的源站叫回退源（Fallback Origin），输入刚才设置的子域名并点击【Add Fallback Origin】，它会同步这个子域名设置的源站作为后续在此接入域名的源站。有些人就会问了，这样设置那不是后续SaaS添加的所有其他域名就只能用同一个源站了？答案确实是这样，为每个SaaS域名自定义源站需要Enterprise以上套餐，有多域名需求多开几个zone吧。\n添加自定义主机名 后续的工作就很简单了，点击【添加自定义主机名】，输入你要添加的未在CF接入的子域名。建议直接选择TXT验证，因为除了证书还有另一条TXT记录要添加，一起加上去比较方便。\n验证域名所有权 添加完成后，按要求解析证书和主机名两个TXT记录，解析生效后10分钟左右即可验证通过，到此这个SaaS域名就正确的添加到了你的zone中并接入了CF。\n特别提醒，如图这里CF给出的验证TXT名称是应完整域名的解析记录，所以在自己的第三方DNS配置的时候，填入的主机名应当是example和_cf-custom-hostname.example，如果直接复制框内的内容把根域名b.com填进了主机名全域就变成了example.b.com.b.com了，是错误的。配置完成之后你可以通过直接复制的域名来检查TXT记录是否匹配，推荐MySSL的工具（点击前往）。\n经过测试，不论以何种方式验证并签发证书，只要保持SSL正确指向CloudFlare，系统就能够在到期前一个月自动为你续期证书，无需进行手动的操作。相应的，SaaS页面Certificate validation method也会变成HTTP Validation。\nSaaS域名解析(优选域名) CF不会告诉你解析到哪个cname接入，这时候将你接入的SaaS域名cname解析到优选域名即可。\n此外，对于防火墙规则、页面规则，直接将添加进的域名输入其中即可圈定范围，完成对于其细则的设置。\n结语 CloudFlare for SaaS是官方提供的一项非常方便的免费功能，弥补了早期未通过Partner接入只能强制NS接入的缺憾。有官方保障、灵活CNAME、免费的优点，也有源站不灵活等缺点，肯定还是不如已经通过Partner/Plesk接入的域名灵活。\n本文引用文章：\nhttps://luotianyi.vc/6185.html\n","date":"2024-09-20T00:00:00Z","permalink":"https://www.uder.rocks/p/saasfallbackorigin/","title":"CloudFlare for SaaS"},{"content":" 构建Docker镜像 本文介绍了一段GitHub Actions工作流代码，它用于自动构建并推送Docker镜像到DockerHub。该工作流在GitHub仓库中配置，并在触发时执行以下步骤：\n设置QEMU以支持多架构构建。 设置Docker Buildx以便使用高级构建功能。 登录到DockerHub。 构建并推送Docker镜像到DockerHub。 工作流代码示例 以下是工作流的完整代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 name: DeployDockerHub on: workflow_dispatch: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up QEMU uses: docker/setup-qemu-action@v1 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v1 - name: Login to DockerHub uses: docker/login-action@v1 with: username: ${{ secrets.DOCKERHUB_USER }} password: ${{ secrets.DOCKERHUB_PASS }} - name: Build and push Docker image id: docker_build uses: docker/build-push-action@v2 with: push: true tags: ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest 配置说明 工作流触发：使用workflow_dispatch触发器，可以手动触发工作流。 QEMU设置：使用docker/setup-qemu-action@v1来设置QEMU，以支持多架构构建。 Docker Buildx设置：使用docker/setup-buildx-action@v1来设置Docker Buildx，以便使用其高级构建功能。 DockerHub登录：使用docker/login-action@v1来登录到DockerHub。用户名和密码通过GitHub Secrets传递，确保安全性。 构建并推送Docker镜像：使用docker/build-push-action@v2来构建并推送Docker镜像。镜像的标签通过GitHub Secrets传递，确保灵活性和安全性。 准备工作 在使用上述工作流之前，需要进行以下准备工作：\n创建GitHub Secrets：\nDOCKERHUB_USER：你的DockerHub用户名。 DOCKERHUB_PASS：你的DockerHub密码。 DOCKER_IMAGE_NAME：你希望推送到DockerHub的镜像名称（例如koyeb-python）。你可以在GitHub仓库的Settings -\u0026gt; Secrets页面添加这些Secrets。 使用步骤 添加工作流文件：在你的GitHub仓库中，创建一个.github/workflows/deploy-to-dockerhub.yml文件，并将上述代码粘贴到文件中。 配置Secrets：按照准备工作中的说明，在GitHub仓库的Settings -\u0026gt; Secrets页面添加必要的Secrets。 手动触发工作流：在GitHub仓库的Actions页面，找到这个工作流并手动触发它。 完成以上步骤后，GitHub Actions将自动构建你的Docker镜像并推送到DockerHub\nGitHub Actions定时推送 本文介绍了一段GitHub Actions工作流代码，它用于自动更新README文件并重新部署到Cloudflare。该工作流可以手动触发或按照计划任务定期触发。\n工作流代码示例 以下是工作流的完整代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 name: Redeploy Cloudflare on: workflow_dispatch: schedule: - cron: \u0026#39;*/30 * * * * *\u0026#39; jobs: Redeploy: name: Redeploy Cloudflare runs-on: ubuntu-latest steps: - uses: actions/checkout@v4.0.0 with: fetch-depth: 1 - name: Renew README.md run: | DATE=$(date \u0026#34;+%Y/%m/%d %H:%M:%S\u0026#34;) echo \u0026#34;${DATE}\u0026#34; \u0026gt; README.md git checkout --orphan tmp_work git branch -d main echo \u0026#34;DATE=${DATE}\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - name: Upload to repository uses: stefanzweifel/git-auto-commit-action@v4.16.0 with: commit_message: Auto deploy by Github Actions, ${{ env.DATE }} create_branch: true branch: main push_options: --force - name: Delete old workflow runs uses: MajorScruffy/delete-old-workflow-runs@v0.3.0 env: GITHUB_TOKEN: ${{ github.token }} with: repository: ${{ github.repository }} older-than-seconds: 3600 配置说明 工作流触发： workflow_dispatch：允许手动触发工作流。 schedule：设置了一个计划任务，每30分钟触发一次（*/30 * * * * *表示每30分钟执行一次）。 工作流步骤： Checkout代码：使用actions/checkout@v4.0.0将仓库的代码检出，fetch-depth: 1表示只获取最新的提交。 更新README.md：获取当前日期和时间，并将其写入README.md文件。使用临时分支tmp_work，删除main分支，然后将日期写入环境变量。 上传到仓库：使用stefanzweifel/git-auto-commit-action@v4.16.0自动提交更新，并强制推送到main分支。 删除旧的工作流运行：使用MajorScruffy/delete-old-workflow-runs@v0.3.0删除超过1小时的旧工作流运行记录，以保持仓库整洁。 准备工作 在使用上述工作流之前，需要进行以下准备工作：\n配置GitHub仓库：\n确保你的GitHub仓库已经设置好，并且你有权限添加和配置GitHub Actions。 设置GitHub Secrets：\nGITHUB_TOKEN：GitHub Actions自动生成的token，无需手动设置，代码中已引用${{ github.token }}。 使用步骤 添加工作流文件：在你的GitHub仓库中，创建一个.github/workflows/redeploy-cloudflare.yml文件，并将上述代码粘贴到文件中。 手动触发工作流：在GitHub仓库的Actions页面，找到这个工作流并手动触发它，或者等待计划任务自动触发。 完成以上步骤后，GitHub Actions将自动更新README文件，并强制推送到main分支，同时删除超过1小时的旧工作流运行记录。\n注意事项 请确保计划任务的cron表达式符合你的需求。当前设置为每30分钟触发一次，如果你希望更改频率，可以调整cron表达式。 强制推送会覆盖main分支上的任何更改，请谨慎使用。如果你的仓库有其他协作者，建议提前沟通。 转载来源网络 ","date":"2024-09-28T00:00:00Z","permalink":"https://www.uder.rocks/p/github_actions/","title":"github_actions"},{"content":"收藏夹汇总 一、赛博善人： github cloudflare youtube 二、ip测试： ip信息 asn查询 延迟检测 dns记录 ip欺诈值 encode cidr计算 域名状态检查 cf访问检测 全面检测 speedtest ip地图 dns泄露测试 路由追踪 滥用检查 ping 三、工具： uuid 哈希生成 encode 2fa 自签名证书 导航 四、云服务器： ucloud 阿里云 希沃斯 五、域名： namesilo us.kg dynv6 阿里云 六、其他： 七、实用插件汇总（名称） Tampermonkey——ID：dhdgffkkebhmkfjojejmpbldmpobfkfo 百度助手(沉浸式网络体验，净化网络，去除各种广告)——ID：copeiejfefagfmjndfgbllokphlmalon 超级复制——ID：kpdflbfgnadefiffbkefbbnfkojfnlkn 草料二维码——ID：moombeodfomdpjnpocobemoiaemednkg IDM Integration Module——ID：ngpampappnmepgilojfohadhhmbhlaek 迅雷下载支持——ID：ncennffkjdiamlpmcbajkmaiiiddgioo Proxy SwitchyOmega（管理和切换多个代理设置）——ID：padekgcemlokbadohgkifijomclgjgif Night Eye（任何网站上的黑暗模式）——ID：jpleiggmebgfjnjhljmjpghmpihckicb 万能B站视频下载-哔哩哔哩助手——ID：logfjcdnlpmihogdjegekojedhflflnc 彩云小译 - 网页翻译插件——ID：abbgboelhkajgikdbjclaecchkneaoma ","date":"2023-09-07T00:00:00Z","permalink":"https://www.uder.rocks/p/stars/","title":"收藏夹"}]